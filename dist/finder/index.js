"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.evaluateXPath = exports.getMultipleSiblingsElements = exports.getSiblingsElements = exports.findElementsWithPredicate = exports.findElements = exports.getElement = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

var _xpath = require("../xpath");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var getElement = function getElement(identifier) {
  var document = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window.document;

  var last = _lodash.default.last(identifier.absolute);

  if (!last) {
    return undefined;
  }

  var xpath = (0, _xpath.toAbsoluteXPath)(identifier);
  var result = evaluateXPath(xpath, document, document);

  if (result.length === 1 && isMatchedAttributes(result[0], last)) {
    return result[0];
  } else {
    return undefined;
  }
};

exports.getElement = getElement;

var findElements = function findElements(identifier) {
  var document = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window.document;

  var last = _lodash.default.last(identifier.absolute);

  if (!last) {
    return [];
  }

  var strictElement = getElement(identifier, document);

  if (strictElement) {
    return [strictElement];
  }

  var uniqueXPath = (0, _xpath.toUniqueXPath)(identifier);
  var uniqueResult = evaluateXPath(uniqueXPath, document, document);
  var uniqueMatched = uniqueResult.filter(function (e) {
    return isMatchedAttributes(e, last);
  });

  if (uniqueMatched.length === 1) {
    return uniqueMatched;
  }

  var elements = [];
  var fragments = [];

  for (var i = 0; i < identifier.absolute.length; i++) {
    var fragment = identifier.absolute[identifier.absolute.length - 1 - i];
    fragments = [fragment].concat(_toConsumableArray(fragments));
    var xpath = (0, _xpath.greedyXPathFromFragments)(fragments);
    var elems = evaluateXPath(xpath, document, document);
    var matched = elems.filter(function (e) {
      return isMatchedAttributes(e, last);
    });

    if (matched.length === 1) {
      elements = matched;
      break;
    } else if (matched.length > 1) {
      elements = matched;
    }
  }

  return elements;
};

exports.findElements = findElements;

var findElementsWithPredicate = function findElementsWithPredicate(identifier, predicate) {
  var document = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : window.document;

  var last = _lodash.default.last(identifier.absolute);

  if (!last) {
    return [];
  }

  var uniqueXPath = (0, _xpath.toUniqueXPath)(identifier);
  var uniqueResult = evaluateXPath(uniqueXPath, document, document);
  var uniqueMatched = uniqueResult.filter(predicate);

  if (uniqueMatched.length === 1) {
    return uniqueMatched;
  }

  var elements = [];
  var fragments = [];

  for (var i = 0; i < identifier.absolute.length; i++) {
    var fragment = identifier.absolute[identifier.absolute.length - 1 - i];
    fragments = [fragment].concat(_toConsumableArray(fragments));
    var xpath = (0, _xpath.greedyXPathFromFragments)(fragments);
    var elems = evaluateXPath(xpath, document, document);
    var matched = elems.filter(predicate);

    if (matched.length === 1) {
      elements = matched;
      break;
    } else if (matched.length > 1) {
      elements = matched;
    }
  }

  return elements;
};

exports.findElementsWithPredicate = findElementsWithPredicate;

var getSiblingsElements = function getSiblingsElements(identifier) {
  var document = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window.document;
  var identifiers = !Array.isArray(identifier) ? [identifier] : identifier;
  var lasts = identifiers.map(function (i) {
    return _lodash.default.last(i.absolute);
  }).filter(function (f) {
    return typeof f !== 'undefined';
  });

  if (lasts.length === 0) {
    return [];
  }

  var xpath = (0, _xpath.toSiblingsXPath)(identifier);
  var elements = evaluateXPath(xpath, document, document);
  return elements.filter(function (e) {
    return lasts.some(function (f) {
      return isMatchedAttributes(e, f);
    });
  });
};

exports.getSiblingsElements = getSiblingsElements;

var getMultipleSiblingsElements = function getMultipleSiblingsElements(identifiers) {
  var document = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window.document;

  if (identifiers.length === 0) {
    return [];
  }

  if (identifiers.length === 1) {
    var result = getSiblingsElements(identifiers[0], document);
    return [result];
  }

  var ancestorXPath = (0, _xpath.toAncestorXPath)(identifiers);
  var ancestorElements = evaluateXPath(ancestorXPath, document, document);
  var elementsArray = identifiers.map(function (identifier) {
    return getSiblingsElements(identifier, document);
  });
  var maxLength = elementsArray.reduce(function (acc, current) {
    return current.length > acc ? current.length : acc;
  }, 0);

  if (ancestorElements.length === maxLength) {
    var grouped = ancestorElements.map(function (ancestor) {
      return elementsArray.map(function (elements) {
        return elements.find(function (e) {
          return (// tslint:disable-next-line
            ancestor.compareDocumentPosition(e) & 16
          );
        } //Node.DOCUMENT_POSITION_CONTAINED_BY
        );
      });
    });
    return _lodash.default.zip.apply(_lodash.default, _toConsumableArray(grouped));
  } else {
    return elementsArray;
  }
};

exports.getMultipleSiblingsElements = getMultipleSiblingsElements;

var isMatchedAttributes = function isMatchedAttributes(element, fragment) {
  return isMatchedId(element, fragment) && isMatchedClassNames(element, fragment) && isMatchedRoles(element, fragment);
};

var isMatchedId = function isMatchedId(element, fragment) {
  var id = element.id.length > 0 ? element.id : undefined;
  return fragment.id === id;
};

var isMatchedClassNames = function isMatchedClassNames(element, fragment) {
  var classNames = Array.from(element.classList);

  if (fragment.classNames.length === 0 && classNames.length === 0) {
    return true;
  }

  var intersected = _lodash.default.intersection(fragment.classNames, classNames);

  return intersected.length > 0;
};

var isMatchedRoles = function isMatchedRoles(element, fragment) {
  var roleString = element.getAttribute('role');
  var roles = roleString ? roleString.split(' ') : [];

  if (fragment.roles.length === 0 && roles.length === 0) {
    return true;
  }

  var intersected = _lodash.default.intersection(fragment.roles, roles);

  return intersected.length > 0;
};

var evaluateXPath = function evaluateXPath(xpath) {
  var root = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window.document;
  var document = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : window.document;
  var result = document.evaluate(root === document && !/^\./.test(xpath) ? xpath : ".".concat(xpath), root, null, 7, // XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,
  null);
  var elements = [];

  for (var i = 0; i < result.snapshotLength; i++) {
    var node = result.snapshotItem(i);

    if (node && node.nodeType === 1) {
      // Node.ELEMENT_NODE
      elements.push(node);
    }
  }

  return elements;
};

exports.evaluateXPath = evaluateXPath;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,