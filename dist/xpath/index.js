"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.xpathFromFragmentsUsingUniqueKey = exports.toUniqueXPath = exports.toSiblingsXPath = exports.toChromeLikeXPath = exports.toAncestorXPath = exports.toAbsoluteXPath = exports.siblingsXPathFromFragments = exports.greedyXPathFromFragments = void 0;

var _builder = require("./builder");

var _converter = require("../identifier/converter");

var _siblings = require("../identifier/siblings");

// eslint-disable-next-line @typescript-eslint/no-var-requires
var xpather = require('xpather');

var x = xpather.x; // eslint-disable-next-line @typescript-eslint/no-var-requires

var Xpath = require('xpather/built/xpath').Xpath;

var toAbsoluteXPath = function toAbsoluteXPath(identifier) {
  var xpath = identifier.absolute.reduce(function (acc, current) {
    var options = {
      ignoreUniqueKey: true
    };
    var nodeName = (0, _builder.buidlNodeName)(current, options);
    var condition = (0, _builder.buildCondition)(current, options);
    return condition ? acc.child(nodeName, condition) : acc.child(nodeName);
  }, new Xpath(''));
  return xpath.build();
};

exports.toAbsoluteXPath = toAbsoluteXPath;

var toUniqueXPath = function toUniqueXPath(identifier) {
  return xpathFromFragmentsUsingUniqueKey(identifier.unique);
};

exports.toUniqueXPath = toUniqueXPath;

var toChromeLikeXPath = function toChromeLikeXPath(identifier) {
  var minHasId = (0, _converter.takeMinHasId)(identifier.absolute);
  var xpath = minHasId.reduce(function (acc, current, index) {
    var options = {
      id: true,
      ignoreUniqueKey: true
    };
    var nodeName = (0, _builder.buidlNodeName)(current, options);
    var condition = (0, _builder.buildCondition)(current, options);

    if (index === 0 && current.depth !== 0) {
      return condition ? x(nodeName, condition) : x(nodeName);
    } else {
      return condition ? acc.child(nodeName, condition) : acc.child(nodeName);
    }
  }, new Xpath(''));
  return xpath.build();
};

exports.toChromeLikeXPath = toChromeLikeXPath;

var toSiblingsXPath = function toSiblingsXPath(identifier) {
  var identifiers = !Array.isArray(identifier) ? [identifier] : identifier;
  var fragments = (0, _siblings.siblingsFragmentsFromIdentifiers)(identifiers);
  return siblingsXPathFromFragments(fragments);
};

exports.toSiblingsXPath = toSiblingsXPath;

var toAncestorXPath = function toAncestorXPath(identifiers) {
  var firstIdentifiers = identifiers.map(function (i) {
    return i[0];
  });
  var fragments = (0, _siblings.ancestorFragmetnsFromIdentifiers)(firstIdentifiers);
  return siblingsXPathFromFragments(fragments);
};

exports.toAncestorXPath = toAncestorXPath;

var xpathFromFragmentsUsingUniqueKey = function xpathFromFragmentsUsingUniqueKey(fragments) {
  var xpath = fragments.reduce(function (acc, current, index, arr) {
    var nodeName = (0, _builder.buidlNodeName)(current);
    var condition = (0, _builder.buildCondition)(current);

    if (index === 0 && current.depth !== 0) {
      return condition ? x(nodeName, condition) : x(nodeName);
    } else {
      var last = arr[index - 1];

      if (typeof last === 'undefined' || last.depth + 1 === current.depth) {
        return condition ? acc.child(nodeName, condition) : acc.child(nodeName);
      } else {
        return condition ? acc.descendant(nodeName, condition) : acc.descendant(nodeName);
      }
    }
  }, new Xpath(''));
  return xpath.build();
};

exports.xpathFromFragmentsUsingUniqueKey = xpathFromFragmentsUsingUniqueKey;

var greedyXPathFromFragments = function greedyXPathFromFragments(fragmetns) {
  var xpath = fragmetns.reduce(function (acc, current, index, arr) {
    var options = {
      className: true,
      role: true,
      strict: false,
      ignoreUniqueKey: true
    };
    var nodeName = (0, _builder.buidlNodeName)(current, options);
    var condition = (0, _builder.buildCondition)(current, options);

    if (index === 0 && current.depth !== 0) {
      return condition ? x(nodeName, condition) : x(nodeName);
    } else {
      var last = arr[index - 1];

      if (typeof last === 'undefined' || last.depth + 1 === current.depth) {
        return condition ? acc.child(nodeName, condition) : acc.child(nodeName);
      } else {
        return condition ? acc.descendant(nodeName, condition) : acc.descendant(nodeName);
      }
    }
  }, new Xpath(''));
  return xpath.build();
};

exports.greedyXPathFromFragments = greedyXPathFromFragments;

var siblingsXPathFromFragments = function siblingsXPathFromFragments(fragmetns) {
  var xpath = fragmetns.reduce(function (acc, current, index, arr) {
    var options = {
      strict: false
    };
    var nodeName = (0, _builder.buidlNodeName)(current, options);
    var condition = (0, _builder.buildCondition)(current, options);

    if (index === 0 && current.depth !== 0) {
      return condition ? x(nodeName, condition) : x(nodeName);
    } else {
      var last = arr[index - 1];

      if (typeof last === 'undefined' || last.depth + 1 === current.depth) {
        return condition ? acc.child(nodeName, condition) : acc.child(nodeName);
      } else {
        return condition ? acc.descendant(nodeName, condition) : acc.descendant(nodeName);
      }
    }
  }, new Xpath(''));
  return xpath.build();
};

exports.siblingsXPathFromFragments = siblingsXPathFromFragments;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy94cGF0aC9pbmRleC50cyJdLCJuYW1lcyI6WyJ4cGF0aGVyIiwicmVxdWlyZSIsIngiLCJYcGF0aCIsInRvQWJzb2x1dGVYUGF0aCIsImlkZW50aWZpZXIiLCJ4cGF0aCIsImFic29sdXRlIiwicmVkdWNlIiwiYWNjIiwiY3VycmVudCIsIm9wdGlvbnMiLCJpZ25vcmVVbmlxdWVLZXkiLCJub2RlTmFtZSIsImNvbmRpdGlvbiIsImNoaWxkIiwiYnVpbGQiLCJ0b1VuaXF1ZVhQYXRoIiwieHBhdGhGcm9tRnJhZ21lbnRzVXNpbmdVbmlxdWVLZXkiLCJ1bmlxdWUiLCJ0b0Nocm9tZUxpa2VYUGF0aCIsIm1pbkhhc0lkIiwiaW5kZXgiLCJpZCIsImRlcHRoIiwidG9TaWJsaW5nc1hQYXRoIiwiaWRlbnRpZmllcnMiLCJBcnJheSIsImlzQXJyYXkiLCJmcmFnbWVudHMiLCJzaWJsaW5nc1hQYXRoRnJvbUZyYWdtZW50cyIsInRvQW5jZXN0b3JYUGF0aCIsImZpcnN0SWRlbnRpZmllcnMiLCJtYXAiLCJpIiwiYXJyIiwibGFzdCIsImRlc2NlbmRhbnQiLCJncmVlZHlYUGF0aEZyb21GcmFnbWVudHMiLCJmcmFnbWV0bnMiLCJjbGFzc05hbWUiLCJyb2xlIiwic3RyaWN0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBS0E7QUFDQSxJQUFNQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxTQUFELENBQXZCOztBQUNBLElBQVFDLENBQVIsR0FBY0YsT0FBZCxDQUFRRSxDQUFSLEMsQ0FDQTs7QUFDQSxJQUFNQyxLQUFLLEdBQUdGLE9BQU8sQ0FBQyxxQkFBRCxDQUFQLENBQStCRSxLQUE3Qzs7QUFFTyxJQUFNQyxlQUFlLEdBQUcsU0FBbEJBLGVBQWtCLENBQUNDLFVBQUQsRUFBMkM7QUFDeEUsTUFBTUMsS0FBSyxHQUFHRCxVQUFVLENBQUNFLFFBQVgsQ0FBb0JDLE1BQXBCLENBQTJCLFVBQUNDLEdBQUQsRUFBTUMsT0FBTixF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TCxHQUFHLENBQUM0QixVQUFKLENBQWV4QixRQUFmLENBRko7QUFHRDtBQUNGO0FBQ0YsR0FqQmEsRUFpQlgsSUFBSVYsS0FBSixDQUFVLEVBQVYsQ0FqQlcsQ0FBZDtBQW1CQSxTQUFPRyxLQUFLLENBQUNVLEtBQU4sRUFBUDtBQUNELENBdkJNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudEZyYWdtZW50LCBFbGVtZW50SWRlbnRpZmllciB9IGZyb20gJy4uL2lkZW50aWZpZXIvaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBidWlkbE5vZGVOYW1lLCBidWlsZENvbmRpdGlvbiwgWFBhdGhPcHRpb25zIH0gZnJvbSAnLi9idWlsZGVyJztcbmltcG9ydCB7IHRha2VNaW5IYXNJZCB9IGZyb20gJy4uL2lkZW50aWZpZXIvY29udmVydGVyJztcbmltcG9ydCB7XG4gIHNpYmxpbmdzRnJhZ21lbnRzRnJvbUlkZW50aWZpZXJzLFxuICBhbmNlc3RvckZyYWdtZXRuc0Zyb21JZGVudGlmaWVycyxcbn0gZnJvbSAnLi4vaWRlbnRpZmllci9zaWJsaW5ncyc7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdmFyLXJlcXVpcmVzXG5jb25zdCB4cGF0aGVyID0gcmVxdWlyZSgneHBhdGhlcicpO1xuY29uc3QgeyB4IH0gPSB4cGF0aGVyO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby12YXItcmVxdWlyZXNcbmNvbnN0IFhwYXRoID0gcmVxdWlyZSgneHBhdGhlci9idWlsdC94cGF0aCcpLlhwYXRoO1xuXG5leHBvcnQgY29uc3QgdG9BYnNvbHV0ZVhQYXRoID0gKGlkZW50aWZpZXI6IEVsZW1lbnRJZGVudGlmaWVyKTogc3RyaW5nID0+IHtcbiAgY29uc3QgeHBhdGggPSBpZGVudGlmaWVyLmFic29sdXRlLnJlZHVjZSgoYWNjLCBjdXJyZW50KSA9PiB7XG4gICAgY29uc3Qgb3B0aW9uczogWFBhdGhPcHRpb25zID0geyBpZ25vcmVVbmlxdWVLZXk6IHRydWUgfTtcbiAgICBjb25zdCBub2RlTmFtZSA9IGJ1aWRsTm9kZU5hbWUoY3VycmVudCwgb3B0aW9ucyk7XG4gICAgY29uc3QgY29uZGl0aW9uID0gYnVpbGRDb25kaXRpb24oY3VycmVudCwgb3B0aW9ucyk7XG5cbiAgICByZXR1cm4gY29uZGl0aW9uID8gYWNjLmNoaWxkKG5vZGVOYW1lLCBjb25kaXRpb24pIDogYWNjLmNoaWxkKG5vZGVOYW1lKTtcbiAgfSwgbmV3IFhwYXRoKCcnKSk7XG5cbiAgcmV0dXJuIHhwYXRoLmJ1aWxkKCk7XG59O1xuXG5leHBvcnQgY29uc3QgdG9VbmlxdWVYUGF0aCA9IChpZGVudGlmaWVyOiBFbGVtZW50SWRlbnRpZmllcik6IHN0cmluZyA9PiB7XG4gIHJldHVybiB4cGF0aEZyb21GcmFnbWVudHNVc2luZ1VuaXF1ZUtleShpZGVudGlmaWVyLnVuaXF1ZSk7XG59O1xuXG5leHBvcnQgY29uc3QgdG9DaHJvbWVMaWtlWFBhdGggPSAoaWRlbnRpZmllcjogRWxlbWVudElkZW50aWZpZXIpOiBzdHJpbmcgPT4ge1xuICBjb25zdCBtaW5IYXNJZCA9IHRha2VNaW5IYXNJZChpZGVudGlmaWVyLmFic29sdXRlKTtcbiAgY29uc3QgeHBhdGggPSBtaW5IYXNJZC5yZWR1Y2UoKGFjYywgY3VycmVudCwgaW5kZXgpID0+IHtcbiAgICBjb25zdCBvcHRpb25zOiBYUGF0aE9wdGlvbnMgPSB7IGlkOiB0cnVlLCBpZ25vcmVVbmlxdWVLZXk6IHRydWUgfTtcbiAgICBjb25zdCBub2RlTmFtZSA9IGJ1aWRsTm9kZU5hbWUoY3VycmVudCwgb3B0aW9ucyk7XG4gICAgY29uc3QgY29uZGl0aW9uID0gYnVpbGRDb25kaXRpb24oY3VycmVudCwgb3B0aW9ucyk7XG5cbiAgICBpZiAoaW5kZXggPT09IDAgJiYgY3VycmVudC5kZXB0aCAhPT0gMCkge1xuICAgICAgcmV0dXJuIGNvbmRpdGlvbiA/IHgobm9kZU5hbWUsIGNvbmRpdGlvbikgOiB4KG5vZGVOYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGNvbmRpdGlvbiA/IGFjYy5jaGlsZChub2RlTmFtZSwgY29uZGl0aW9uKSA6IGFjYy5jaGlsZChub2RlTmFtZSk7XG4gICAgfVxuICB9LCBuZXcgWHBhdGgoJycpKTtcblxuICByZXR1cm4geHBhdGguYnVpbGQoKTtcbn07XG5cbmV4cG9ydCBjb25zdCB0b1NpYmxpbmdzWFBhdGggPSAoXG4gIGlkZW50aWZpZXI6IEVsZW1lbnRJZGVudGlmaWVyIHwgRWxlbWVudElkZW50aWZpZXJbXVxuKTogc3RyaW5nID0+IHtcbiAgY29uc3QgaWRlbnRpZmllcnMgPSAhQXJyYXkuaXNBcnJheShpZGVudGlmaWVyKSA/IFtpZGVudGlmaWVyXSA6IGlkZW50aWZpZXI7XG4gIGNvbnN0IGZyYWdtZW50cyA9IHNpYmxpbmdzRnJhZ21lbnRzRnJvbUlkZW50aWZpZXJzKGlkZW50aWZpZXJzKTtcbiAgcmV0dXJuIHNpYmxpbmdzWFBhdGhGcm9tRnJhZ21lbnRzKGZyYWdtZW50cyk7XG59O1xuXG5leHBvcnQgY29uc3QgdG9BbmNlc3RvclhQYXRoID0gKGlkZW50aWZpZXJzOiBFbGVtZW50SWRlbnRpZmllcltdW10pOiBzdHJpbmcgPT4ge1xuICBjb25zdCBmaXJzdElkZW50aWZpZXJzID0gaWRlbnRpZmllcnMubWFwKChpKSA9PiBpWzBdKTtcbiAgY29uc3QgZnJhZ21lbnRzID0gYW5jZXN0b3JGcmFnbWV0bnNGcm9tSWRlbnRpZmllcnMoZmlyc3RJZGVudGlmaWVycyk7XG4gIHJldHVybiBzaWJsaW5nc1hQYXRoRnJvbUZyYWdtZW50cyhmcmFnbWVudHMpO1xufTtcblxuZXhwb3J0IGNvbnN0IHhwYXRoRnJvbUZyYWdtZW50c1VzaW5nVW5pcXVlS2V5ID0gKFxuICBmcmFnbWVudHM6IEVsZW1lbnRGcmFnbWVudFtdXG4pOiBzdHJpbmcgPT4ge1xuICBjb25zdCB4cGF0aCA9IGZyYWdtZW50cy5yZWR1Y2UoKGFjYywgY3VycmVudCwgaW5kZXgsIGFycikgPT4ge1xuICAgIGNvbnN0IG5vZGVOYW1lID0gYnVpZGxOb2RlTmFtZShjdXJyZW50KTtcbiAgICBjb25zdCBjb25kaXRpb24gPSBidWlsZENvbmRpdGlvbihjdXJyZW50KTtcblxuICAgIGlmIChpbmRleCA9PT0gMCAmJiBjdXJyZW50LmRlcHRoICE9PSAwKSB7XG4gICAgICByZXR1cm4gY29uZGl0aW9uID8geChub2RlTmFtZSwgY29uZGl0aW9uKSA6IHgobm9kZU5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBsYXN0ID0gYXJyW2luZGV4IC0gMV07XG4gICAgICBpZiAodHlwZW9mIGxhc3QgPT09ICd1bmRlZmluZWQnIHx8IGxhc3QuZGVwdGggKyAxID09PSBjdXJyZW50LmRlcHRoKSB7XG4gICAgICAgIHJldHVybiBjb25kaXRpb24gPyBhY2MuY2hpbGQobm9kZU5hbWUsIGNvbmRpdGlvbikgOiBhY2MuY2hpbGQobm9kZU5hbWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGNvbmRpdGlvblxuICAgICAgICAgID8gYWNjLmRlc2NlbmRhbnQobm9kZU5hbWUsIGNvbmRpdGlvbilcbiAgICAgICAgICA6IGFjYy5kZXNjZW5kYW50KG5vZGVOYW1lKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIG5ldyBYcGF0aCgnJykpO1xuXG4gIHJldHVybiB4cGF0aC5idWlsZCgpO1xufTtcblxuZXhwb3J0IGNvbnN0IGdyZWVkeVhQYXRoRnJvbUZyYWdtZW50cyA9IChcbiAgZnJhZ21ldG5zOiBFbGVtZW50RnJhZ21lbnRbXVxuKTogc3RyaW5nID0+IHtcbiAgY29uc3QgeHBhdGggPSBmcmFnbWV0bnMucmVkdWNlKChhY2MsIGN1cnJlbnQsIGluZGV4LCBhcnIpID0+IHtcbiAgICBjb25zdCBvcHRpb25zOiBYUGF0aE9wdGlvbnMgPSB7XG4gICAgICBjbGFzc05hbWU6IHRydWUsXG4gICAgICByb2xlOiB0cnVlLFxuICAgICAgc3RyaWN0OiBmYWxzZSxcbiAgICAgIGlnbm9yZVVuaXF1ZUtleTogdHJ1ZSxcbiAgICB9O1xuICAgIGNvbnN0IG5vZGVOYW1lID0gYnVpZGxOb2RlTmFtZShjdXJyZW50LCBvcHRpb25zKTtcbiAgICBjb25zdCBjb25kaXRpb24gPSBidWlsZENvbmRpdGlvbihjdXJyZW50LCBvcHRpb25zKTtcblxuICAgIGlmIChpbmRleCA9PT0gMCAmJiBjdXJyZW50LmRlcHRoICE9PSAwKSB7XG4gICAgICByZXR1cm4gY29uZGl0aW9uID8geChub2RlTmFtZSwgY29uZGl0aW9uKSA6IHgobm9kZU5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBsYXN0ID0gYXJyW2luZGV4IC0gMV07XG4gICAgICBpZiAodHlwZW9mIGxhc3QgPT09ICd1bmRlZmluZWQnIHx8IGxhc3QuZGVwdGggKyAxID09PSBjdXJyZW50LmRlcHRoKSB7XG4gICAgICAgIHJldHVybiBjb25kaXRpb24gPyBhY2MuY2hpbGQobm9kZU5hbWUsIGNvbmRpdGlvbikgOiBhY2MuY2hpbGQobm9kZU5hbWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGNvbmRpdGlvblxuICAgICAgICAgID8gYWNjLmRlc2NlbmRhbnQobm9kZU5hbWUsIGNvbmRpdGlvbilcbiAgICAgICAgICA6IGFjYy5kZXNjZW5kYW50KG5vZGVOYW1lKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIG5ldyBYcGF0aCgnJykpO1xuXG4gIHJldHVybiB4cGF0aC5idWlsZCgpO1xufTtcblxuZXhwb3J0IGNvbnN0IHNpYmxpbmdzWFBhdGhGcm9tRnJhZ21lbnRzID0gKFxuICBmcmFnbWV0bnM6IEVsZW1lbnRGcmFnbWVudFtdXG4pOiBzdHJpbmcgPT4ge1xuICBjb25zdCB4cGF0aCA9IGZyYWdtZXRucy5yZWR1Y2UoKGFjYywgY3VycmVudCwgaW5kZXgsIGFycikgPT4ge1xuICAgIGNvbnN0IG9wdGlvbnM6IFhQYXRoT3B0aW9ucyA9IHsgc3RyaWN0OiBmYWxzZSB9O1xuICAgIGNvbnN0IG5vZGVOYW1lID0gYnVpZGxOb2RlTmFtZShjdXJyZW50LCBvcHRpb25zKTtcbiAgICBjb25zdCBjb25kaXRpb24gPSBidWlsZENvbmRpdGlvbihjdXJyZW50LCBvcHRpb25zKTtcblxuICAgIGlmIChpbmRleCA9PT0gMCAmJiBjdXJyZW50LmRlcHRoICE9PSAwKSB7XG4gICAgICByZXR1cm4gY29uZGl0aW9uID8geChub2RlTmFtZSwgY29uZGl0aW9uKSA6IHgobm9kZU5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBsYXN0ID0gYXJyW2luZGV4IC0gMV07XG4gICAgICBpZiAodHlwZW9mIGxhc3QgPT09ICd1bmRlZmluZWQnIHx8IGxhc3QuZGVwdGggKyAxID09PSBjdXJyZW50LmRlcHRoKSB7XG4gICAgICAgIHJldHVybiBjb25kaXRpb24gPyBhY2MuY2hpbGQobm9kZU5hbWUsIGNvbmRpdGlvbikgOiBhY2MuY2hpbGQobm9kZU5hbWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGNvbmRpdGlvblxuICAgICAgICAgID8gYWNjLmRlc2NlbmRhbnQobm9kZU5hbWUsIGNvbmRpdGlvbilcbiAgICAgICAgICA6IGFjYy5kZXNjZW5kYW50KG5vZGVOYW1lKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIG5ldyBYcGF0aCgnJykpO1xuXG4gIHJldHVybiB4cGF0aC5idWlsZCgpO1xufTtcbiJdfQ==