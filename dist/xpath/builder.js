"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.joinConditionsByOr = exports.joinConditionsByAnd = exports.buildPositionCondition = exports.buildRoleCondition = exports.buildClassNameCondition = exports.buildIdCondition = exports.buildCondition = exports.buidlNodeName = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

var _interfaces = require("../identifier/interfaces");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { keys.push.apply(keys, Object.getOwnPropertySymbols(object)); } if (enumerableOnly) keys = keys.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// tslint:disable-next-line
var With = require('xpather').With; // tslint:disable-next-line


var Condition = require('xpather/built/condition').Condition;

var buidlNodeName = function buidlNodeName(fragment) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var opts = _objectSpread({
    id: false
  }, options);

  return opts.id && typeof fragment.id !== 'undefined' ? '*' : fragment.nodeName;
};

exports.buidlNodeName = buidlNodeName;

var buildCondition = function buildCondition(fragment) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var opts = _objectSpread({
    id: false,
    className: false,
    role: false,
    strict: true,
    ignoreUniqueKey: false
  }, options);

  var idCondition = buildIdCondition(fragment, opts);
  var classNameConditions = buildClassNameCondition(fragment, opts);
  var roleConditions = buildRoleCondition(fragment, opts);
  var positionCondition = buildPositionCondition(fragment, opts);

  var conditionArray = _lodash.default.compact([idCondition, classNameConditions, roleConditions, positionCondition]);

  var conditions = conditionArray.length > 0 ? opts.strict ? joinConditionsByAnd(conditionArray) : joinConditionsByOr(conditionArray) : undefined;
  return conditions;
};

exports.buildCondition = buildCondition;

var buildIdCondition = function buildIdCondition(fragment, options) {
  if (options.ignoreUniqueKey && options.id && typeof fragment.id !== 'undefined') {
    return With.exactId(fragment.id);
  } else {
    return undefined;
  }
};

exports.buildIdCondition = buildIdCondition;

var buildClassNameCondition = function buildClassNameCondition(fragment, options) {
  if (!options.ignoreUniqueKey && fragment.uniqueKey === _interfaces.UniqueKey.ClassName || options.className && fragment.classNames.length > 0) {
    var arr = fragment.classNames.map(function (cn) {
      return With.attribute('class', cn);
    });
    return options.strict ? joinConditionsByAnd(arr) : joinConditionsByOr(arr);
  } else {
    return undefined;
  }
};

exports.buildClassNameCondition = buildClassNameCondition;

var buildRoleCondition = function buildRoleCondition(fragment, options) {
  if (!options.ignoreUniqueKey && fragment.uniqueKey === _interfaces.UniqueKey.Role || options.role && fragment.roles.length > 0) {
    var arr = fragment.roles.map(function (r) {
      return With.attribute('role', r);
    });
    return options.strict ? joinConditionsByAnd(arr) : joinConditionsByOr(arr);
  } else {
    return undefined;
  }
};

exports.buildRoleCondition = buildRoleCondition;

var buildPositionCondition = function buildPositionCondition(fragment, options) {
  if (!options.ignoreUniqueKey) {
    if (fragment.uniqueKey === _interfaces.UniqueKey.Index && fragment.hasSiblings && fragment.index + 1) {
      return With.position(fragment.index + 1);
    } else {
      return undefined;
    }
  } else {
    if (!fragment.hasSiblings || fragment.index === -1) {
      return undefined;
    }

    if (options.id && typeof fragment.id !== 'undefined') {
      return undefined;
    }

    if (options.className && fragment.classNames.length > 0 || options.role && fragment.roles.length > 0) {
      return new Condition("position() = ".concat(fragment.index + 1));
    } else {
      return With.position(fragment.index + 1);
    }
  }
}; // eslint-disable-next-line @typescript-eslint/no-explicit-any


exports.buildPositionCondition = buildPositionCondition;

var joinConditionsByAnd = function joinConditionsByAnd(conditions) {
  return conditions.reduce(function (acc, current) {
    return acc.and(current);
  });
}; // eslint-disable-next-line @typescript-eslint/no-explicit-any


exports.joinConditionsByAnd = joinConditionsByAnd;

var joinConditionsByOr = function joinConditionsByOr(conditions) {
  return conditions.reduce(function (acc, current) {
    return acc.or(current);
  });
};

exports.joinConditionsByOr = joinConditionsByOr;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,